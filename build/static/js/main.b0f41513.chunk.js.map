{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Numbers","props","persons","map","person","name","number","click","Input","onChange","change","value","val","Button","type","onClick","Message","className","message","Form","nameInput","numberInput","addButton","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","listShown","setListShown","setMessage","messageClass","setMessageClass","useEffect","personService","checkIfIncludedAlready","included","forEach","includes","event","filter","toLowerCase","target","heading","preventDefault","newPerson","personInPhonebook","window","confirm","setTimeout","concat","personDeleted","find","contactId","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0f41513.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = 'api/persons'\n\nconst getAllPersons = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteEntry = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n// eslint-disable-next-line\nexport default {getAllPersons, create, update, deleteEntry,}\n","import React, { useEffect, useState } from 'react'\nimport personService from './services/persons'\nimport './App.css'\n\nconst Numbers = (props) => {\n  return (\n    <div>\n      {props.persons.map(person => \n        <p key={person.name}>{person.name} {person.number} <Button id={person.name} name={props.name} click={props.click}/></p> \n      )}   \n    </div>\n  )\n}\n\nconst Input = (props) => {\n  return (\n    <>\n      {props.name} <input onChange={props.change} value={props.val}/>\n      <br></br>\n    </>\n  )\n}\n\nconst Button = (props) => {\n  return (\n    <>\n      <button id={props.id} type='submit' onClick={props.click}>{props.name}</button>\n    </>\n  )\n}\n\nconst Message = (props) => {\n  return (\n    <>\n      <p className={props.className}>{props.message}</p>\n    </>\n  )\n}\n\nconst Form = (props) => {\n  return (\n    <form>\n      <div>\n         {props.nameInput}\n         {props.numberInput} \n      </div>\n        <div>\n          {props.addButton}\n        </div>\n    </form>\n  )\n}\n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ listShown, setListShown ] = useState([]) \n  const [ message, setMessage ] = useState('')\n  const [ messageClass, setMessageClass ] = useState('hidden')\n\n  useEffect(() => {\n    personService.getAllPersons()\n      .then(response => {\n        setPersons(response)\n        setListShown(response)\n      })\n  }, [])\n \n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const checkIfIncludedAlready = (newName) => {\n    let included;\n    persons.forEach(person => {\n      if (person.name.includes(newName)) {\n        included = true\n      } else {\n        included = false\n      }\n    })\n    return included\n  }\n\n  const addNewPerson = (event) => {\n    event.preventDefault()\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n    \n    if (checkIfIncludedAlready(newPerson.name)) {\n      const personInPhonebook = persons.filter(person => person.name === newPerson.name)\n      if (personInPhonebook.number !== newPerson.number) {\n        window.confirm(`${newPerson.name} is already added to the phonebook, replace the old number with a new one?`)\n        personService.update(personInPhonebook[0].id, newPerson)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== response.id ? person : response))\n          setListShown(persons.map(person => person.id !== response.id ? person : response))\n          setMessageClass('good_message')\n          setMessage(`Changed ${newPerson.name}'s number`)\n          setTimeout(() => {\n            setMessage('')\n            setMessageClass('hidden')\n          }, 2500)\n        })\n      }\n      setNewName('')\n      setNewNumber('')\n    } \n    \n    if (!(checkIfIncludedAlready(newPerson.name))) {\n      personService.create(newPerson)\n      .then(response => {\n        setPersons(persons.concat(response))\n        setListShown(persons.concat(response))\n\n        setMessageClass('good_message')\n        setMessage(`Added ${newPerson.name}`)\n        setTimeout(() => {\n          setMessage('')\n          setMessageClass('hidden')\n        }, 2500)\n\n        setNewName('')\n        setNewNumber('')\n      })\n    }\n  }\n\n  const filterList = (event) => {\n    setListShown(persons.filter(person => person.name.toLowerCase().includes(event.target.value)))\n  }\n\n  const deleteContact = (event) => {\n    event.preventDefault()\n    \n    const personDeleted = persons.find(person => person.name === event.target.id)\n    const contactId = personDeleted.id\n\n    window.confirm(`Delete ${personDeleted.name}?`)\n\n    personService.deleteEntry(contactId)\n    .then( \n      setPersons(persons.filter(person => person.id !== contactId))\n    ).then(\n      setListShown(persons.filter(person => person.id !== contactId)) // bad form \n    )\n    .catch(error => {\n      setMessageClass('bad_message')\n      setMessage(`Information of ${personDeleted.name} has already been removed from the server`)\n      setTimeout(() => {\n        setMessage('')\n        setMessageClass('hidden')\n      }, 4000)\n    })\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Message className={messageClass} message={message}/>\n      <Input name={'Filter phonebook: '} change={filterList}/>\n      <h2>Add New Contact</h2>\n      <Form heading={\"Add a new contact\"} \n        nameInput={<Input name={'name: '} change={handleNameChange} val={newName}/>}\n        numberInput={<Input name={'number: '} change={handleNumberChange} val={newNumber}/>}\n        addButton={<Button name='add' click={addNewPerson}/>}\n      />\n      <h2>Numbers</h2>\n      <Numbers persons={listShown} name={'Delete'} click={deleteContact}/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}